const hre = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
  const { ethers } = hre;

  console.log("Creating test listing...");

  const [deployer] = await ethers.getSigners();
  console.log("Using account:", deployer.address);

  // Hardcoded contract address from deployment
  const smartRentAddress = "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707";
  console.log("SmartRent address:", smartRentAddress);

  // Get SmartRent contract
  const SmartRent = await ethers.getContractFactory("SmartRent");
  const smartRent = SmartRent.attach(smartRentAddress);

  // Test listing data
  const testListings = [
    {
      title: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ",
      description: "–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å —Ä–µ–º–æ–Ω—Ç–æ–º. –ü–æ–ª–Ω–æ—Å—Ç—å—é –º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–∞, –µ—Å—Ç—å –≤—Å—è –±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞. –†—è–¥–æ–º –º–µ—Ç—Ä–æ, –º–∞–≥–∞–∑–∏–Ω—ã, –ø–∞—Ä–∫.",
      pricePerDay: "0.5", // 0.5 MATIC per day
      deposit: "5.0", // 5 MATIC deposit
      ipfsHash: "QmExampleCentralApartment"
    },
    {
      title: "–£—é—Ç–Ω–∞—è —Å—Ç—É–¥–∏—è –≤–æ–∑–ª–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞",
      description: "–ù–µ–±–æ–ª—å—à–∞—è —Å—Ç—É–¥–∏—è –≤ —Å–ø–æ–∫–æ–π–Ω–æ–º —Ä–∞–π–æ–Ω–µ. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –º–æ–ª–æ–¥—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –ü–∞—Ä–∫–æ–≤–∫–∞, —Ä—è–¥–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.",
      pricePerDay: "0.3",
      deposit: "3.0",
      ipfsHash: "QmExampleStudioUniversity"
    },
    {
      title: "–õ—é–∫—Å-–ø–µ–Ω—Ç—Ö–∞—É—Å —Å –±–∞—Å—Å–µ–π–Ω–æ–º",
      description: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø–µ–Ω—Ç—Ö–∞—É—Å —Å —á–∞—Å—Ç–Ω—ã–º –±–∞—Å—Å–µ–π–Ω–æ–º –∏ –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä–æ–¥. –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Å—å–µ—Ä–∂, –æ—Ö—Ä–∞–Ω–∞, –ø–∞—Ä–∫–æ–≤–∫–∞. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–æ–±—ã—Ç–∏–π.",
      pricePerDay: "2.0",
      deposit: "20.0",
      ipfsHash: "QmExampleLuxPenthouse"
    }
  ];

  console.log("\nüìù Creating listings...\n");

  for (let i = 0; i < testListings.length; i++) {
    const listing = testListings[i];
    
    try {
      console.log(`Creating listing ${i + 1}/${testListings.length}: "${listing.title}"`);
      
      const tx = await smartRent.createListing(
        listing.title,
        listing.description,
        ethers.parseEther(listing.pricePerDay),
        ethers.parseEther(listing.deposit),
        listing.ipfsHash
      );
      
      console.log(`‚è≥ Transaction sent: ${tx.hash}`);
      console.log("   Waiting for confirmation...");
      
      const receipt = await tx.wait();
      console.log(`‚úÖ Listing ${i + 1} created! Block: ${receipt.blockNumber}`);
      console.log(`   Listing ID: ${i}`);
      console.log(`   Price: ${listing.pricePerDay} MATIC/day`);
      console.log(`   Deposit: ${listing.deposit} MATIC\n`);
    } catch (error) {
      console.error(`‚ùå Failed to create listing ${i + 1}:`, error.message);
    }
  }

  // Get platform statistics
  console.log("\nüìä Platform Statistics:");
  console.log("=".repeat(50));
  
  try {
    const stats = await smartRent.getPlatformStatistics();
    console.log(`Total Listings: ${stats[0]}`);
    console.log(`Total Rentals: ${stats[1]}`);
    console.log(`Total Disputes: ${stats[2]}`);
    console.log(`Total Volume: ${ethers.formatEther(stats[3])} MATIC`);
  } catch (error) {
    console.error("Failed to fetch statistics:", error.message);
  }

  console.log("\n" + "=".repeat(50));
  console.log("‚úÖ Test listings created successfully!");
  console.log("=".repeat(50));
  console.log("\nüìù Next steps:");
  console.log("1. Open http://localhost:5173 in your browser");
  console.log("2. Connect MetaMask to Hardhat network");
  console.log("3. Import test account (private key from Hardhat logs)");
  console.log("4. Browse listings on the frontend");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå Failed to create listings!");
    console.error(error);
    process.exit(1);
  });

